# coding: utf-8
require 'sinatra/base'
require 'sinatra/reloader'
require 'data_mapper'
require 'json'
require 'pry'
require_relative 'word'
require_relative 'user'
require 'cgi/session'
require 'cgi'

DataMapper::Logger.new($stdout, :debug)
DataMapper.setup(:default, 'postgres://postgres:@db')

cgi = CGI.new
session = CGI::Session.new(cgi)

# Sinatra Main controller
class MainApp < Sinatra::Base
  configure :development do
    register Sinatra::Reloader
  end

  get '/' do
    "hello"
  end

  get '/user/delete' do
    user = User.all
    user.each do |one|
      one.destroy.to_s
    end
  end
  
  get '/user/users' do
    user = User.all.map do |u|
      u.id.to_s + ": #{u.name},#{u.mail}"
    end
    user.join(', ')
  end
 
  post '/user/new' do
    params = JSON.parse(request.body.read)
    
    if(User.all(name: params["name"]).first.nil?)
      user = User.create(name: params["name"],mail: params["mail"], pass: params["pass"])
      user.id.to_s
    else
      p User.all(name: params["name"]).first
      "already registered"
    end
  end
  
  post '/login' do
    params = JSON.parse(request.body.read)

    if(User.all(name: params["name"], pass: params["pass"]).first.nil?)
      "not registered"
    else
      session[:login] = "name"
    end
  end

  get '/session' do
    p session[:login]
  end
  
  get '/words' do
    words = Word.all.map do |w|
      w.id.to_s + ": #{w.msg}"
    end
    words.join("\n")
  end
 
  get '/words/:id' do
    id = params[:id]
    word = Word.get(id)
    if word.nil?
      "Record of id: #{id} is not found."
    else
      word.id.to_s + ": #{word.msg}"
    end
  end
  
  post '/words' do
    word = Word.create(msg: request.body.gets)
    p Word.all
    word.id.to_s
  end
  
  put '/words/:id' do
    id = params[:id]
    word = Word.get(id)
    if word.nil?
      'false'
    else
      word.update(msg: request.body.gets)
      'true'
    end
  end
  delete '/words/:id' do
    id = params[:id]
    word = Word.get(id)
    if word.nil?
      'false'
    else
      word.destroy.to_s
    end
  end
end


set :run, false
set :environment, :cgi
Rack::Handler::CGI.run Sinatra::Application
